import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.image.BufferedImage;

/**
 * This class is called DrawingCanvas and it is the class that draws the shapes, lines or clears the screen
 * based on the button that is pressed from PaintWindow class. 
 */

public class DrawingCanvas extends JPanel
{   
    int startX;     // Creates int variables of starting and ending (X, Y)
    int startY;
    int width;
    int height;
    
    BufferedImage image;    // Creates a buffered image
    
    Graphics2D rf;
    
    private static DrawingCanvas instance;  // Creating static instance of DrawingCanvas
    
    String action = ""; 
    
    int shape = 0;
    
    PaintWindow clear, fillrectangle, filloval, rectangle, oval, line;  // Importing buttons from PaintWindow to DrawingCanvas
    
    public DrawingCanvas()  // Constructor for DrawingCanvas class
    {
        addMouseListener(new MouseListener());  // Adds Mouse Listener to inherited JPanel 
    }
    
    public static DrawingCanvas getInstance() // Creates an instance of canvas that can be used by the PaintWindow
    {
        if (instance == null) 
        {
            instance = new DrawingCanvas();
        }
        return instance;
    }
    
    public void setShape(int m) // Sets shape equal to int of shape (Used in PaintWindow class)
    {
        shape = m;
    }
    
    public void setAction(String inAction)
    {
        inAction = action;
    }
    
    public void clear() // Clear method that repaints the canvas
    {
        image = null;
        repaint();
    }
    
    public void paintComponent(Graphics g)  // This method draws the shapes, given that the conditional statements are true
    {
        super.paintComponent(g);
        Graphics2D g5 = (Graphics2D)g;
        
        if (image == null)
        {
            int width = this.getWidth();
            int height = this.getHeight();
            image = (BufferedImage)(this.createImage(width, height));
            rf = image.createGraphics();            
        }
    }
    
    public void drawing()
    {         
        switch (action) {
        // Executes clear(); method if action equals "Clear" button
            case "Clear":
                clear();
                repaint();
                break;
        // Executes fillRect(); method if action equals "Fill Rectangle" button
            case "Fill Rectangle":
                rf.fillRect(startX, startY, width, height);
                break;
        // Executes fillOval(); method if action equals "Fill Oval" button
            case "Fill Oval":
                rf.fillOval(startX, startY, width, height);
                break;
        // Executes drawRect(); method if action equals "Rectangle" button
            case "Rectangle":
                rf.drawRect(startX, startY, width, height);
                break;
        // Executes drawOval(); method if action equals "Oval" button
            case "Oval":
                rf.drawOval(startX, startY, width, height);
                break;
        // Executes drawLine(); method if action equals "Line" button
            case "Line":
                rf.drawLine(startX, startY, width, height);
                break;
            default:
                break;
        }
        repaint();    
    }
    
    public class MouseListener implements MouseListener
    {
        public void mouseExited(MouseEvent e)
        {
            // Nothing goes in here
        }
        
        public void mouseEntered(MouseEvent e)
        {
            // Nothing goes in here
        }
        
        public void mouseClicked(MouseEvent e)
        {
            // Nothing goes in here because we are dragging the mouse
        }
        
        public void mousePressed(MouseEvent e)
        {
            startX = e.getX();
            startY = e.getY();            
        }
        
        public void mouseReleased(MouseEvent e)
        {
            int x;
            int endX = e.getX();
            int endY = e.getY();
            
            if (endX < startX)
            {
                if (endY < startY)
                {
                    width = startX - endX;
                    height = startY - endY;
                    startX = endX;
                    startY = endY;
                }             
                else
                {
                    width = startX - endX;
                    height = endY - startY;
                    startX = endX;
                }
            }
            
            else
            {
                if (endY < startY)
                {
                    width = endX - startX;
                    height = startX - endY;
                    startY = endY;
                }
                else
                {
                    width = endX - startX;
                    height = endY - startY;
                }
            }            
            drawing();        
        }
    }    
}

