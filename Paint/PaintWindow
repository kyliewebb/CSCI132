package paint;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 * Dustin Hofer and Kylie Webb
 * CSCI 132 - Paint Program
 * 2/22/2016
 */

/**
 * This class will create the buttons and add them to a button panel which is on
 * the main frame. It will also implement an ActionListener and a MouseListener
 */
public class PaintWindow extends JFrame implements ActionListener
{

    JButton clear;  // Buttons
    JButton fillrectangle;  // Buttons
    JButton filloval;   // Buttons
    JButton rectangle;  // Buttons
    JButton oval;   // Buttons
    JButton line;   // Buttons
    JButton color;  // Color button that opens color chooser
    Color cccolor = (Color.BLACK);
    DrawingCanvas canvas;   // Creates a canvas that is of type class DrawingCanvas

    public PaintWindow() // PaintWindow Constructor where the magic happens
    {
        canvas = DrawingCanvas.getInstance();

        JFrame frame = new JFrame("Paint Program");   // Creates new frame with title "Paint Program"
        frame.setSize(800,700);  // Sets frame size
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);    // Closes panel when exit button is pressed

        JMenuBar menuBar = new JMenuBar();  // Creates a new JMenuBar named menuBar
        JMenu file = new JMenu("File"); // Creates file
        JMenu view = new JMenu("View"); // Creates view 
        JMenu about = new JMenu("About");   // Creates about

        // Creates exit and save buttons as menu items
        JMenuItem exit = new JMenuItem("Exit"); 
        JMenuItem save = new JMenuItem("Save");
        JMenuItem logo = new JMenuItem("Logo");
        exit.addActionListener(this);   // Adds Action Listener to exit button
        

        // Adds exit and save menu items to file menu
        file.add(save);
        file.add(exit);

        view.add(new JMenuItem("Blank"));

        about.add(logo); //adds a logo to the dialog box
        logo.addActionListener(this);  // Adds Action Listener to logo button

        //adds the "file", "view" and "about" dropdown menus to the menu bar
        menuBar.add(file);
        menuBar.add(view);
        menuBar.add(about);      

        JPanel buttonpanel = new JPanel();    // Creates new panel for buttons to rest in
        
        // Creates icons that use the .png images in the src folder 
        Icon frect = new ImageIcon(getClass().getResource("frect.png")); //filled rectangle
        Icon rect = new ImageIcon(getClass().getResource("rect.png")); //empty rectangle
        Icon foval = new ImageIcon(getClass().getResource("foval.png")); //filled oval
        Icon ovalicon = new ImageIcon(getClass().getResource("ovalicon.png")); //empty oval
        Icon clearicon = new ImageIcon(getClass().getResource("clearicon.png")); //clear 
        Icon lineicon = new ImageIcon(getClass().getResource("lineicon.png")); //line
        Icon coloricon = new ImageIcon(getClass().getResource("coloricon.png")); //color chooser

        
        
        // Adds icons to the buttons
        clear = new JButton(clearicon); // Creates name for clear button
        fillrectangle = new JButton(frect);    // Creates name for fillrectangle button
        filloval = new JButton(foval); // Creates name for filloval button
        rectangle = new JButton(rect); // Creates name for rectangle button
        oval = new JButton(ovalicon);   // Creates name for oval button
        line = new JButton(lineicon);   // Creates name for line button        
        color = new JButton(coloricon);
        
        //sets action commands, i.e. makes the buttons equal to strings in a sense,
        //so that they can be used in a switch statement
        clear.setActionCommand("Clear"); 
        fillrectangle.setActionCommand("Fill Rectangle");
        filloval.setActionCommand("Fill Oval"); 
        rectangle.setActionCommand("Rectangle"); 
        oval.setActionCommand("Oval"); 
        line.setActionCommand("Line"); 
        color.setActionCommand("Color"); 
        
        // Adds the actionListener to the color button which in turn creates a JColorChooser window and lets user select color 
        color.addActionListener(    
                new ActionListener()
                {
                    public void actionPerformed(ActionEvent event)
                    {
                        JLabel label = new JLabel();
                        cccolor = JColorChooser.showDialog(null, "Pick Your Color", label.getForeground());
                        DrawingCanvas.getInstanceOfGraphics().setColor(cccolor);
                    }
                }
        );
        
        buttonpanel.add(clear);  // Adds clear button to buttonpanel
        buttonpanel.add(fillrectangle);   // Adds fillrectangle button to buttonpanel
        buttonpanel.add(filloval);    // Adds filloval button to buttonpanel
        buttonpanel.add(rectangle);   // Adds rectangle button to buttonpanel
        buttonpanel.add(oval);    // Adds oval button to buttonpanel
        buttonpanel.add(line);    // Adds line button to button panel
        buttonpanel.add(color); // Adds color button to button panel
        
        buttonpanel.setBackground(Color.ORANGE);   // Background color of button panel is red

        clear.addActionListener(this);    // Adds button listener to clear button
        fillrectangle.addActionListener(this);    // Adds button listener to fillrectangle button
        filloval.addActionListener(this); // Adds button listener to filloval button
        rectangle.addActionListener(this);    // Adds button listener to rectangle button
        oval.addActionListener(this); // Adds button listener to oval button
        line.addActionListener(this); // Adds button listener to line button

        frame.setJMenuBar(menuBar);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().add(buttonpanel, BorderLayout.NORTH);  // Adds buttonpanel to Northern end of frame
        frame.getContentPane().add(canvas, BorderLayout.CENTER);  // Adds canvas to Southern end of frame
        frame.setVisible(true);   // Sets frame visibility to true

    }
    
    @Override
    public void actionPerformed(ActionEvent ae)
    {
        String button = ae.getActionCommand();

        switch (button) {
            case "Oval": 
                canvas.getInstance().setShape(Shapes.oval);
                break;
            case "Rectangle":
                canvas.getInstance().setShape(Shapes.rectangle);
                break;
            case "Fill Oval":
                canvas.getInstance().setShape(Shapes.filloval);
                break;
            case "Fill Rectangle":
                canvas.getInstance().setShape(Shapes.fillrectangle);
                break;
            case "Line":
                canvas.getInstance().setShape(Shapes.line);
                break;
            case "Clear":
                canvas.getInstance().clear();
                break;
            case "Exit":
                System.exit(0);
            case "Logo": //Case for the logo in the about section of the dropdown menus
                //follows the same idea as making the big canvas used
                JFrame logoframe = new JFrame();
                logoframe.setSize(500, 500);
                JButton logobutton;
                logoframe.setLocationRelativeTo(null);
                Icon aboutlogo = new ImageIcon(getClass().getResource("paintlogo.png"));
                logobutton = new JButton(aboutlogo);
                logoframe.add(logobutton);
                logoframe.setVisible(true);
            default:
                break;
        }
    }
}
